CREATE TABLE Account (
    username NVARCHAR2(50) NOT NULL,
    pass NVARCHAR2(50) NOT NULL,
    email VARCHAR2(50) UNIQUE,
    IsActive NUMBER(1) DEFAULT 1,
    IsAdmin NUMBER(1) DEFAULT 0,
    ID NUMBER(10) UNIQUE,
	PRIMARY KEY(username, pass),
    CONSTRAINT chk_account_email CHECK (REGEXP_LIKE(email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'))
);


CREATE TABLE Employee (
    employeeId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
    employeeName NVARCHAR2(100) NOT NULL,
    birthday DATE NOT NULL,
    sex NVARCHAR2(10) NOT NULL,
    employeeAddress NVARCHAR2(255) NOT NULL,
    phoneNumber VARCHAR2(15) UNIQUE,
    email VARCHAR2(50) UNIQUE,
    IsActive NUMBER(1) DEFAULT 1,
    position NUMBER(5) NOT NULL,
    CONSTRAINT chk_emp_sex CHECK (sex IN (N'Nam', N'Nữ')),
    CONSTRAINT chk_emp_phone CHECK (LENGTH(phoneNumber) = 10),
    CONSTRAINT chk_emp_email CHECK (REGEXP_LIKE(email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'))
);

CREATE TABLE Customer (
    customerId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
    customerName NVARCHAR2(100),
    customerAddress NVARCHAR2(255),
    phoneNumber VARCHAR2(15) UNIQUE,
    email VARCHAR2(50) UNIQUE,
    CONSTRAINT chk_cus_phone CHECK (LENGTH(phoneNumber) = 10),
    CONSTRAINT chk_cus_email CHECK (REGEXP_LIKE(email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'))
);

CREATE TABLE Product (
    ProductId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
    productName NVARCHAR2(100) NOT NULL,
    qualityStandard NVARCHAR2(50),
    purchasePrice FLOAT DEFAULT 0,
    sellingPrice FLOAT DEFAULT 0,
    photo BLOB,
    IsActive NUMBER(1) DEFAULT 1,
    CONSTRAINT chk_prod_price CHECK (purchasePrice >= 0),
    CONSTRAINT chk_sell_price CHECK (sellingPrice >= 0)
);

CREATE TABLE WarehouseInfo (
    productId NUMBER(10) PRIMARY KEY,
    quantity NUMBER(10) DEFAULT 0 NOT NULL,
    measurementUnit NVARCHAR2(30) NOT NULL,
    CONSTRAINT chk_wh_quantity CHECK (quantity >= 0)
);

CREATE TABLE Receipt (
    receiptId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
    receiptDate DATE DEFAULT SYSDATE NOT NULL, 
    typeOfReceipt NVARCHAR2(10) NOT NULL,
    priceTotal FLOAT DEFAULT 0 NOT NULL,
    discount FLOAT DEFAULT 0,
    note NVARCHAR2(2000), 
    CONSTRAINT chk_receipt_type CHECK (typeOfReceipt IN (N'Mua', N'Bán')),
    CONSTRAINT chk_receipt_total CHECK (priceTotal >= 0),
    CONSTRAINT chk_receipt_discount CHECK (discount >= 0)
);

CREATE TABLE ReceiptDetail (
    receiptId NUMBER(10) NOT NULL,
    productId NUMBER(10) NOT NULL,
    productName NVARCHAR2(100) NOT NULL,
    quantity NUMBER(10) NOT NULL,
    unitPrice FLOAT DEFAULT 0 NOT NULL,
    PRIMARY KEY(receiptId, productId),
    CONSTRAINT chk_detail_quantity CHECK (quantity > 0),
    CONSTRAINT chk_detail_price CHECK (unitPrice >= 0)
);

CREATE TABLE Transactions (
    transactionId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
    employeeId NUMBER(10),
    receiptId NUMBER(10),
    customerId NUMBER(10),
    deliveryAddress NVARCHAR2(255),
    DateOfImplementation DATE NOT NULL,
    repayment NUMBER(10) DEFAULT 0 NOT NULL,
    CONSTRAINT chk_trans_paid CHECK (repayment >= 0)
);

CREATE TABLE Schedule (
    scheduleId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
    employeeId NUMBER(10) NOT NULL,
    datework DATE NOT NULL,
    timecheckin INTERVAL DAY(2) TO SECOND NOT NULL, 
    timecheckout INTERVAL DAY(2) TO SECOND NOT NULL,
    linkpicture NVARCHAR2(255)
);


ALTER TABLE WarehouseInfo ADD CONSTRAINT FK_WH_Product FOREIGN KEY (productId) REFERENCES Product(ProductId) ON DELETE CASCADE;
ALTER TABLE ReceiptDetail ADD CONSTRAINT FK_RD_Receipt FOREIGN KEY (receiptId) REFERENCES Receipt(receiptId);
ALTER TABLE ReceiptDetail ADD CONSTRAINT FK_RD_Product FOREIGN KEY (productId) REFERENCES Product(ProductId);
ALTER TABLE Transactions ADD CONSTRAINT FK_Trans_Employee FOREIGN KEY (employeeId) REFERENCES Employee(employeeId);
ALTER TABLE Transactions ADD CONSTRAINT FK_Trans_Receipt FOREIGN KEY (receiptId) REFERENCES Receipt(receiptId);
ALTER TABLE Transactions ADD CONSTRAINT FK_Trans_Customer FOREIGN KEY (customerId) REFERENCES Customer(customerId);
ALTER TABLE Schedule ADD CONSTRAINT fk_Schedule_Employee FOREIGN KEY (employeeId) REFERENCES Employee(employeeId);
ALTER TABLE Account ADD CONSTRAINT FK_Account_Employee FOREIGN KEY (ID) REFERENCES Employee(employeeId) ON DELETE CASCADE;











CREATE TABLE Product_Audit (
    AuditId NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ProductId NUMBER(10),
    ProductName NVARCHAR2(100),
    QualityStandard NVARCHAR2(50),
    PurchasePrice FLOAT,
    SellingPrice FLOAT,
    Photo BLOB,
    IsActive NUMBER(1),
    Changed_On TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE OR REPLACE TRIGGER trg_product_before_update
BEFORE UPDATE ON Product
FOR EACH ROW
BEGIN
    IF :OLD.ProductId != 0 THEN
        INSERT INTO Product_Audit (
            ProductId, ProductName, QualityStandard, PurchasePrice, SellingPrice, Photo, IsActive
        ) VALUES (
            :OLD.ProductId, :OLD.ProductName, :OLD.QualityStandard, :OLD.PurchasePrice, :OLD.SellingPrice, :OLD.Photo, :OLD.IsActive
        );
    END IF;
END;
COMMIT;

